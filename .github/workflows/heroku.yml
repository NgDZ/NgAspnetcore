name: ci

on:
  push:
    branches: master
jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
      
      - uses: borales/actions-yarn@v2.0.0
        with:
          cmd: install # will run `yarn install` command
      - name: Push image
        run: |      
          echo ${{ secrets.HEROKU_APP_NAME }}     
          echo  "**************************************************  Buildin Dotnet Application ${{ secrets.HEROKU_APP_NAME }}  **************************************************"
          #rm -rf deploy
          #npm i -g yarn
          mkdir deploy
          mkdir deploy/APP_DATA
          mkdir deploy/wwwroot
          cd deploy
          wget https://github.com/NgDZ/assets/raw/main/Northwind.db
          wget https://github.com/NgDZ/assets/raw/main/app-abpdz.db 
          cd ..
          cd  aspnet-core/
          dotnet restore
          cd  src/NgAspnetcore.HttpApi.Host
          #dotnet publish -c Release  
          dotnet publish  -c Release -r linux-x64  
          rm -f yarn.lock
          yarn
          npm run copy
          cd ../../../
          echo  "******************************************************  Buildin angular Application  ******************************************************"
          cd angular
          echo  "Angular: Restore npm packages " 
          rm -f yarn.lock
          yarn
          echo  "Angular: Build angular project"
          npm run build-prod 
          cd ..
          echo  "***************************************************** Copy assets to target directory  **************************************************"
          rm -rf angular/dist/ngaspnetcore/*.map
          cp -rf aspnet-core/src/NgAspnetcore.HttpApi.Host/bin/Release/net6.0/linux-x64/publish/* deploy/
          cp -rf angular/dist/ngaspnetcore/*  deploy/wwwroot/
          ls -lR deploy/
          
          FILE=deploy/NgAspnetcore.HttpApi.Host
          if [ -f "$FILE" ]; then
            echo "Server build successful."
          else 
            echo "error on Server buid ."
            exit 100
          fi
          FILE=deploy/wwwroot/index.html
          if [ -f "$FILE" ]; then
            echo "client build successful."
          else 
            echo "error on client buid ."
            exit 100
          fi
          echo  "***************************************************** End Build ****************************************************"
          echo '***************************************************** build docker image***************************************************** '
          docker build -t  ${{ secrets.HEROKU_APP_NAME }}  -f Dockerfile .
          echo '***************************************************** docker login ${{ secrets.HEROKU_USERNAME }} ***************************************************** '
          docker login --username=${{ secrets.HEROKU_USERNAME }} --password=${{ secrets.HEROKU_API_KEY }}  registry.heroku.com
          
          echo '***************************************************** docker tag ***************************************************** '
          docker tag ${{ secrets.HEROKU_APP_NAME }} registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
           echo '***************************************************** docker push***************************************************** '
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
          echo '***************************************************** heroku start***************************************************** '
          imageId=$(docker inspect registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web --format={{.Id}})
          payload='{"updates":[{"type":"web","docker_image":"'"$imageId"'"}]}'
          curl -n -X PATCH https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/formation \
          -d "$payload" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}"
        
