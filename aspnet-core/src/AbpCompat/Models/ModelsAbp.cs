//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.4.0 (NJsonSchema v10.1.26.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
namespace AbpCompat
{
    using System = global::System;
    public class ApiController : Controller
    {
    }
    public interface IAbpApplicationConfigurationController
    {
        /// <returns>Success</returns>
        Task<ApplicationConfigurationDto> ApplicationConfigurationAsync();
    }
    public partial class AbpApplicationConfigurationController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/abp/application-configuration", Name = "application-configuration")]
        public Task<ApplicationConfigurationDto> ApplicationConfiguration()
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IAbpTenantController
    {
        /// <returns>Success</returns>
        Task<FindTenantResultDto> ByNameAsync(string name);
        /// <returns>Success</returns>
        Task<FindTenantResultDto> ByIdAsync(System.Guid id);
    }
    public partial class AbpTenantController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/abp/multi-tenancy/tenants/by-name/{name}", Name = "by-name")]
        public Task<FindTenantResultDto> ByName(string name)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/abp/multi-tenancy/tenants/by-id/{id}", Name = "by-id")]
        public Task<FindTenantResultDto> ById(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IAccountController
    {
        /// <returns>Success</returns>
        Task<IdentityUserDto> RegisterAsync(RegisterDto body);
        /// <returns>Success</returns>
        Task SendPasswordResetCodeAsync(SendPasswordResetCodeDto body);
        /// <returns>Success</returns>
        Task ResetPasswordAsync(ResetPasswordDto body);
    }
    public partial class AccountController : ApiController
    {

        /// <returns>Success</returns>
        [HttpPost, Route("api/account/register", Name = "register")]
        public Task<IdentityUserDto> Register([FromBody] RegisterDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/account/send-password-reset-code", Name = "send-password-reset-code")]
        public Task SendPasswordResetCode([FromBody] SendPasswordResetCodeDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/account/reset-password", Name = "reset-password")]
        public Task ResetPassword([FromBody] ResetPasswordDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IFeaturesController
    {
        /// <returns>Success</returns>
        Task<GetFeatureListResultDto> FeaturesGetAsync(string providerName, string providerKey);
        /// <returns>Success</returns>
        Task FeaturesPutAsync(string providerName, string providerKey, UpdateFeaturesDto body);
    }
    public partial class FeaturesController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/feature-management/features", Name = "features")]
        public Task<GetFeatureListResultDto> FeaturesGet([FromQuery] string providerName, [FromQuery] string providerKey)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/feature-management/features", Name = "features2")]
        public Task FeaturesPut([FromQuery] string providerName, [FromQuery] string providerKey, [FromBody] UpdateFeaturesDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface ILoginController
    {
        /// <returns>Success</returns>
        Task<AbpLoginResult> LoginAsync(UserLoginInfo body);
        /// <returns>Success</returns>
        Task LogoutAsync();
        /// <returns>Success</returns>
        Task<AbpLoginResult> CheckPasswordAsync(UserLoginInfo body);
    }
    public partial class LoginController : ApiController
    {

        /// <returns>Success</returns>
        [HttpPost, Route("api/account/login", Name = "login")]
        public Task<AbpLoginResult> Login([FromBody] UserLoginInfo body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/account/logout", Name = "logout")]
        public Task Logout()
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/account/check-password", Name = "check-password")]
        public Task<AbpLoginResult> CheckPassword([FromBody] UserLoginInfo body)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IPermissionsController
    {
        /// <returns>Success</returns>
        Task<GetPermissionListResultDto> PermissionsGetAsync(string providerName, string providerKey);
        /// <returns>Success</returns>
        Task PermissionsPutAsync(string providerName, string providerKey, UpdatePermissionsDto body);
    }
    public partial class PermissionsController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/permission-management/permissions", Name = "permissions")]
        public Task<GetPermissionListResultDto> PermissionsGet([FromQuery] string providerName, [FromQuery] string providerKey)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/permission-management/permissions", Name = "permissions2")]
        public Task PermissionsPut([FromQuery] string providerName, [FromQuery] string providerKey, [FromBody] UpdatePermissionsDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IProfileController
    {
        /// <returns>Success</returns>
        Task<ProfileDto> MyProfileGetAsync();
        /// <returns>Success</returns>
        Task<ProfileDto> MyProfilePutAsync(UpdateProfileDto body);
        /// <returns>Success</returns>
        Task ChangePasswordAsync(ChangePasswordInput body);
    }
    public partial class ProfileController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/my-profile", Name = "my-profile")]
        public Task<ProfileDto> MyProfileGet()
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/identity/my-profile", Name = "my-profile2")]
        public Task<ProfileDto> MyProfilePut([FromBody] UpdateProfileDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/identity/my-profile/change-password", Name = "change-password")]
        public Task ChangePassword([FromBody] ChangePasswordInput body)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IRoleController
    {
        /// <returns>Success</returns>
        Task<IdentityRoleDtoListResultDto> AllAsync();
        /// <returns>Success</returns>
        Task<IdentityRoleDtoPagedResultDto> RolesGetAsync(string filter, string sorting, int? skipCount, int? maxResultCount);
        /// <returns>Success</returns>
        Task<IdentityRoleDto> RolesPostAsync(IdentityRoleCreateDto body);
        /// <returns>Success</returns>
        Task<IdentityRoleDto> RolesGetAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<IdentityRoleDto> RolesPutAsync(System.Guid id, IdentityRoleUpdateDto body);
        /// <returns>Success</returns>
        Task RolesDeleteAsync(System.Guid id);
    }
    public partial class RoleController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/roles/all", Name = "all")]
        public Task<IdentityRoleDtoListResultDto> All()
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/roles", Name = "roles")]
        public Task<IdentityRoleDtoPagedResultDto> RolesGet([FromQuery] string filter, [FromQuery] string sorting, [FromQuery] int? skipCount, [FromQuery] int? maxResultCount)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/identity/roles", Name = "roles2")]
        public Task<IdentityRoleDto> RolesPost([FromBody] IdentityRoleCreateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/roles/{id}", Name = "roles3")]
        public Task<IdentityRoleDto> RolesGet(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/identity/roles/{id}", Name = "roles4")]
        public Task<IdentityRoleDto> RolesPut(System.Guid id, [FromBody] IdentityRoleUpdateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpDelete, Route("api/identity/roles/{id}", Name = "roles5")]
        public Task RolesDelete(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface ITenantController
    {
        /// <returns>Success</returns>
        Task<TenantDto> TenantsGetAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<TenantDto> TenantsPutAsync(System.Guid id, TenantUpdateDto body);
        /// <returns>Success</returns>
        Task TenantsDeleteAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<TenantDtoPagedResultDto> TenantsGetAsync(string filter, string sorting, int? skipCount, int? maxResultCount);
        /// <returns>Success</returns>
        Task<TenantDto> TenantsPostAsync(TenantCreateDto body);
        /// <returns>Success</returns>
        Task<string> DefaultConnectionStringGetAsync(System.Guid id);
        /// <returns>Success</returns>
        Task DefaultConnectionStringPutAsync(System.Guid id, string defaultConnectionString);
        /// <returns>Success</returns>
        Task DefaultConnectionStringDeleteAsync(System.Guid id);
    }
    public partial class TenantController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/multi-tenancy/tenants/{id}", Name = "tenants")]
        public Task<TenantDto> TenantsGet(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/multi-tenancy/tenants/{id}", Name = "tenants2")]
        public Task<TenantDto> TenantsPut(System.Guid id, [FromBody] TenantUpdateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpDelete, Route("api/multi-tenancy/tenants/{id}", Name = "tenants3")]
        public Task TenantsDelete(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/multi-tenancy/tenants", Name = "tenants4")]
        public Task<TenantDtoPagedResultDto> TenantsGet([FromQuery] string filter, [FromQuery] string sorting, [FromQuery] int? skipCount, [FromQuery] int? maxResultCount)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/multi-tenancy/tenants", Name = "tenants5")]
        public Task<TenantDto> TenantsPost([FromBody] TenantCreateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/multi-tenancy/tenants/{id}/default-connection-string", Name = "default-connection-string")]
        public Task<string> DefaultConnectionStringGet(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/multi-tenancy/tenants/{id}/default-connection-string", Name = "default-connection-string2")]
        public Task DefaultConnectionStringPut(System.Guid id, [FromQuery] string defaultConnectionString)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpDelete, Route("api/multi-tenancy/tenants/{id}/default-connection-string", Name = "default-connection-string3")]
        public Task DefaultConnectionStringDelete(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IUserController
    {
        /// <returns>Success</returns>
        Task<IdentityUserDto> UsersGetAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<IdentityUserDto> UsersPutAsync(System.Guid id, IdentityUserUpdateDto body);
        /// <returns>Success</returns>
        Task UsersDeleteAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<IdentityUserDtoPagedResultDto> UsersGetAsync(string filter, string sorting, int? skipCount, int? maxResultCount);
        /// <returns>Success</returns>
        Task<IdentityUserDto> UsersPostAsync(IdentityUserCreateDto body);
        /// <returns>Success</returns>
        Task<IdentityRoleDtoListResultDto> RolesGetAsync(System.Guid id);
        /// <returns>Success</returns>
        Task RolesPutAsync(System.Guid id, IdentityUserUpdateRolesDto body);
        /// <returns>Success</returns>
        Task<IdentityRoleDtoListResultDto> AssignableRolesAsync();
        /// <returns>Success</returns>
        Task<IdentityUserDto> ByUsernameAsync(string userName);
        /// <returns>Success</returns>
        Task<IdentityUserDto> ByEmailAsync(string email);
    }
    public partial class UserController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/{id}", Name = "users")]
        public Task<IdentityUserDto> UsersGet(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/identity/users/{id}", Name = "users2")]
        public Task<IdentityUserDto> UsersPut(System.Guid id, [FromBody] IdentityUserUpdateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpDelete, Route("api/identity/users/{id}", Name = "users3")]
        public Task UsersDelete(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users", Name = "users4")]
        public Task<IdentityUserDtoPagedResultDto> UsersGet([FromQuery] string filter, [FromQuery] string sorting, [FromQuery] int? skipCount, [FromQuery] int? maxResultCount)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPost, Route("api/identity/users", Name = "users5")]
        public Task<IdentityUserDto> UsersPost([FromBody] IdentityUserCreateDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/{id}/roles", Name = "roles6")]
        public Task<IdentityRoleDtoListResultDto> RolesGet(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpPut, Route("api/identity/users/{id}/roles", Name = "roles7")]
        public Task RolesPut(System.Guid id, [FromBody] IdentityUserUpdateRolesDto body)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/assignable-roles", Name = "assignable-roles")]
        public Task<IdentityRoleDtoListResultDto> AssignableRoles()
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/by-username/{userName}", Name = "by-username")]
        public Task<IdentityUserDto> ByUsername(string userName)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/by-email/{email}", Name = "by-email")]
        public Task<IdentityUserDto> ByEmail(string email)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }
    public interface IUserLookupController
    {
        /// <returns>Success</returns>
        Task<UserData> LookupAsync(System.Guid id);
        /// <returns>Success</returns>
        Task<UserData> ByUsernameAsync(string userName);
        /// <returns>Success</returns>
        Task<UserDataListResultDto> SearchAsync(string filter, string sorting, int? skipCount, int? maxResultCount);
        /// <returns>Success</returns>
        Task<long> CountAsync(string filter);
    }
    public partial class UserLookupController : ApiController
    {

        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/lookup/{id}", Name = "lookup")]
        public Task<UserData> Lookup(System.Guid id)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/lookup/by-username/{userName}", Name = "by-username2")]
        public Task<UserData> ByUsername(string userName)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/lookup/search", Name = "search")]
        public Task<UserDataListResultDto> Search([FromQuery] string filter, [FromQuery] string sorting, [FromQuery] int? skipCount, [FromQuery] int? maxResultCount)
        {
            throw new System.NotImplementedException("not implement api");
        }
        /// <returns>Success</returns>
        [HttpGet, Route("api/identity/users/lookup/count", Name = "count")]
        public Task<long> Count([FromQuery] string filter)
        {
            throw new System.NotImplementedException("not implement api");
        }
    }

    public partial class LanguageInfo
    {
        [JsonConstructor]
        public LanguageInfo(string @cultureName, string @displayName, string @flagIcon, string @uiCultureName)
        {
            this.CultureName = @cultureName;
            this.UiCultureName = @uiCultureName;
            this.DisplayName = @displayName;
            this.FlagIcon = @flagIcon;
        }
        public string CultureName { get; }
        public string UiCultureName { get; }
        public string DisplayName { get; }
        public string FlagIcon { get; }
    }

    public partial class DateTimeFormatDto
    {
        [JsonConstructor]
        public DateTimeFormatDto(string @calendarAlgorithmType, string @dateSeparator, string @dateTimeFormatLong, string @fullDateTimePattern, string @longTimePattern, string @shortDatePattern, string @shortTimePattern)
        {
            this.CalendarAlgorithmType = @calendarAlgorithmType;
            this.DateTimeFormatLong = @dateTimeFormatLong;
            this.ShortDatePattern = @shortDatePattern;
            this.FullDateTimePattern = @fullDateTimePattern;
            this.DateSeparator = @dateSeparator;
            this.ShortTimePattern = @shortTimePattern;
            this.LongTimePattern = @longTimePattern;
        }
        public string CalendarAlgorithmType { get; }
        public string DateTimeFormatLong { get; }
        public string ShortDatePattern { get; }
        public string FullDateTimePattern { get; }
        public string DateSeparator { get; }
        public string ShortTimePattern { get; }
        public string LongTimePattern { get; }
    }

    public partial class CurrentCultureDto
    {
        [JsonConstructor]
        public CurrentCultureDto(string @cultureName, DateTimeFormatDto @dateTimeFormat, string @displayName, string @englishName, bool @isRightToLeft, string @name, string @nativeName, string @threeLetterIsoLanguageName, string @twoLetterIsoLanguageName)
        {
            this.DisplayName = @displayName;
            this.EnglishName = @englishName;
            this.ThreeLetterIsoLanguageName = @threeLetterIsoLanguageName;
            this.TwoLetterIsoLanguageName = @twoLetterIsoLanguageName;
            this.IsRightToLeft = @isRightToLeft;
            this.CultureName = @cultureName;
            this.Name = @name;
            this.NativeName = @nativeName;
            this.DateTimeFormat = @dateTimeFormat;
        }
        public string DisplayName { get; }
        public string EnglishName { get; }
        public string ThreeLetterIsoLanguageName { get; }
        public string TwoLetterIsoLanguageName { get; }
        public bool IsRightToLeft { get; }
        public string CultureName { get; }
        public string Name { get; }
        public string NativeName { get; }
        public DateTimeFormatDto DateTimeFormat { get; }
    }

    public partial class NameValue
    {
        [JsonConstructor]
        public NameValue(string @name, string @value)
        {
            this.Name = @name;
            this.Value = @value;
        }
        public string Name { get; }
        public string Value { get; }
    }

    public partial class ApplicationLocalizationConfigurationDto
    {
        [JsonConstructor]
        public ApplicationLocalizationConfigurationDto(CurrentCultureDto @currentCulture, string @defaultResourceName, System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<NameValue>> @languageFilesMap, System.Collections.Generic.List<LanguageInfo> @languages, System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<NameValue>> @languagesMap, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, string>> @values)
        {
            this.Values = @values;
            this.Languages = @languages;
            this.CurrentCulture = @currentCulture;
            this.DefaultResourceName = @defaultResourceName;
            this.LanguagesMap = @languagesMap;
            this.LanguageFilesMap = @languageFilesMap;
        }
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, string>> Values { get; }
        public System.Collections.Generic.List<LanguageInfo> Languages { get; }
        public CurrentCultureDto CurrentCulture { get; }
        public string DefaultResourceName { get; }
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<NameValue>> LanguagesMap { get; }
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.List<NameValue>> LanguageFilesMap { get; }
    }

    public partial class ApplicationAuthConfigurationDto
    {
        [JsonConstructor]
        public ApplicationAuthConfigurationDto(System.Collections.Generic.IDictionary<string, bool> @grantedPolicies, System.Collections.Generic.IDictionary<string, bool> @policies)
        {
            this.Policies = @policies;
            this.GrantedPolicies = @grantedPolicies;
        }
        public System.Collections.Generic.IDictionary<string, bool> Policies { get; }
        public System.Collections.Generic.IDictionary<string, bool> GrantedPolicies { get; }
    }

    public partial class ApplicationSettingConfigurationDto
    {
        [JsonConstructor]
        public ApplicationSettingConfigurationDto(System.Collections.Generic.IDictionary<string, string> @values)
        {
            this.Values = @values;
        }
        public System.Collections.Generic.IDictionary<string, string> Values { get; }
    }

    public partial class CurrentUserDto
    {
        [JsonConstructor]
        public CurrentUserDto(string @email, bool @emailVerified, System.Guid? @id, bool @isAuthenticated, string @name, string @phoneNumber, bool @phoneNumberVerified, System.Collections.Generic.List<string> @roles, string @surName, System.Guid? @tenantId, string @userName)
        {
            this.IsAuthenticated = @isAuthenticated;
            this.Id = @id;
            this.TenantId = @tenantId;
            this.UserName = @userName;
            this.Name = @name;
            this.SurName = @surName;
            this.Email = @email;
            this.EmailVerified = @emailVerified;
            this.PhoneNumber = @phoneNumber;
            this.PhoneNumberVerified = @phoneNumberVerified;
            this.Roles = @roles;
        }
        public bool IsAuthenticated { get; }
        public System.Guid? Id { get; }
        public System.Guid? TenantId { get; }
        public string UserName { get; }
        public string Name { get; }
        public string SurName { get; }
        public string Email { get; }
        public bool EmailVerified { get; }
        public string PhoneNumber { get; }
        public bool PhoneNumberVerified { get; }
        public System.Collections.Generic.List<string> Roles { get; }
    }

    public partial class ApplicationFeatureConfigurationDto
    {
        [JsonConstructor]
        public ApplicationFeatureConfigurationDto(System.Collections.Generic.IDictionary<string, string> @values)
        {
            this.Values = @values;
        }
        public System.Collections.Generic.IDictionary<string, string> Values { get; }
    }

    public partial class MultiTenancyInfoDto
    {
        [JsonConstructor]
        public MultiTenancyInfoDto(bool @isEnabled)
        {
            this.IsEnabled = @isEnabled;
        }
        public bool IsEnabled { get; }
    }

    public partial class CurrentTenantDto
    {
        [JsonConstructor]
        public CurrentTenantDto(System.Guid? @id, bool @isAvailable, string @name)
        {
            this.Id = @id;
            this.Name = @name;
            this.IsAvailable = @isAvailable;
        }
        public System.Guid? Id { get; }
        public string Name { get; }
        public bool IsAvailable { get; }
    }

    public partial class IanaTimeZone
    {
        [JsonConstructor]
        public IanaTimeZone(string @timeZoneName)
        {
            this.TimeZoneName = @timeZoneName;
        }
        public string TimeZoneName { get; }
    }

    public partial class WindowsTimeZone
    {
        [JsonConstructor]
        public WindowsTimeZone(string @timeZoneId)
        {
            this.TimeZoneId = @timeZoneId;
        }
        public string TimeZoneId { get; }
    }

    public partial class TimeZone
    {
        [JsonConstructor]
        public TimeZone(IanaTimeZone @iana, WindowsTimeZone @windows)
        {
            this.Iana = @iana;
            this.Windows = @windows;
        }
        public IanaTimeZone Iana { get; }
        public WindowsTimeZone Windows { get; }
    }

    public partial class TimingDto
    {
        [JsonConstructor]
        public TimingDto(TimeZone @timeZone)
        {
            this.TimeZone = @timeZone;
        }
        public TimeZone TimeZone { get; }
    }

    public partial class ClockDto
    {
        [JsonConstructor]
        public ClockDto(string @kind)
        {
            this.Kind = @kind;
        }
        public string Kind { get; }
    }

    public partial class LocalizableStringDto
    {
        [JsonConstructor]
        public LocalizableStringDto(string @name, string @resource)
        {
            this.Name = @name;
            this.Resource = @resource;
        }
        public string Name { get; }
        public string Resource { get; }
    }

    public partial class ExtensionPropertyApiGetDto
    {
        [JsonConstructor]
        public ExtensionPropertyApiGetDto(bool @isAvailable)
        {
            this.IsAvailable = @isAvailable;
        }
        public bool IsAvailable { get; }
    }

    public partial class ExtensionPropertyApiCreateDto
    {
        [JsonConstructor]
        public ExtensionPropertyApiCreateDto(bool @isAvailable)
        {
            this.IsAvailable = @isAvailable;
        }
        public bool IsAvailable { get; }
    }

    public partial class ExtensionPropertyApiUpdateDto
    {
        [JsonConstructor]
        public ExtensionPropertyApiUpdateDto(bool @isAvailable)
        {
            this.IsAvailable = @isAvailable;
        }
        public bool IsAvailable { get; }
    }

    public partial class ExtensionPropertyApiDto
    {
        [JsonConstructor]
        public ExtensionPropertyApiDto(ExtensionPropertyApiCreateDto @onCreate, ExtensionPropertyApiGetDto @onGet, ExtensionPropertyApiUpdateDto @onUpdate)
        {
            this.OnGet = @onGet;
            this.OnCreate = @onCreate;
            this.OnUpdate = @onUpdate;
        }
        public ExtensionPropertyApiGetDto OnGet { get; }
        public ExtensionPropertyApiCreateDto OnCreate { get; }
        public ExtensionPropertyApiUpdateDto OnUpdate { get; }
    }

    public partial class ExtensionPropertyUiTableDto
    {
        [JsonConstructor]
        public ExtensionPropertyUiTableDto(bool @isVisible)
        {
            this.IsVisible = @isVisible;
        }
        public bool IsVisible { get; }
    }

    public partial class ExtensionPropertyUiFormDto
    {
        [JsonConstructor]
        public ExtensionPropertyUiFormDto(bool @isVisible)
        {
            this.IsVisible = @isVisible;
        }
        public bool IsVisible { get; }
    }

    public partial class ExtensionPropertyUiLookupDto
    {
        [JsonConstructor]
        public ExtensionPropertyUiLookupDto(string @displayPropertyName, string @filterParamName, string @resultListPropertyName, string @url, string @valuePropertyName)
        {
            this.Url = @url;
            this.ResultListPropertyName = @resultListPropertyName;
            this.DisplayPropertyName = @displayPropertyName;
            this.ValuePropertyName = @valuePropertyName;
            this.FilterParamName = @filterParamName;
        }
        public string Url { get; }
        public string ResultListPropertyName { get; }
        public string DisplayPropertyName { get; }
        public string ValuePropertyName { get; }
        public string FilterParamName { get; }
    }

    public partial class ExtensionPropertyUiDto
    {
        [JsonConstructor]
        public ExtensionPropertyUiDto(ExtensionPropertyUiLookupDto @lookup, ExtensionPropertyUiFormDto @onCreateForm, ExtensionPropertyUiFormDto @onEditForm, ExtensionPropertyUiTableDto @onTable)
        {
            this.OnTable = @onTable;
            this.OnCreateForm = @onCreateForm;
            this.OnEditForm = @onEditForm;
            this.Lookup = @lookup;
        }
        public ExtensionPropertyUiTableDto OnTable { get; }
        public ExtensionPropertyUiFormDto OnCreateForm { get; }
        public ExtensionPropertyUiFormDto OnEditForm { get; }
        public ExtensionPropertyUiLookupDto Lookup { get; }
    }

    public partial class ExtensionPropertyAttributeDto
    {
        [JsonConstructor]
        public ExtensionPropertyAttributeDto(System.Collections.Generic.IDictionary<string, object> @config, string @typeSimple)
        {
            this.TypeSimple = @typeSimple;
            this.Config = @config;
        }
        public string TypeSimple { get; }
        public System.Collections.Generic.IDictionary<string, object> Config { get; }
    }

    public partial class ExtensionPropertyDto
    {
        [JsonConstructor]
        public ExtensionPropertyDto(ExtensionPropertyApiDto @api, System.Collections.Generic.List<ExtensionPropertyAttributeDto> @attributes, System.Collections.Generic.IDictionary<string, object> @configuration, object @defaultValue, LocalizableStringDto @displayName, string @type, string @typeSimple, ExtensionPropertyUiDto @ui)
        {
            this.Type = @type;
            this.TypeSimple = @typeSimple;
            this.DisplayName = @displayName;
            this.Api = @api;
            this.Ui = @ui;
            this.Attributes = @attributes;
            this.Configuration = @configuration;
            this.DefaultValue = @defaultValue;
        }
        public string Type { get; }
        public string TypeSimple { get; }
        public LocalizableStringDto DisplayName { get; }
        public ExtensionPropertyApiDto Api { get; }
        public ExtensionPropertyUiDto Ui { get; }
        public System.Collections.Generic.List<ExtensionPropertyAttributeDto> Attributes { get; }
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; }
        public object DefaultValue { get; }
    }

    public partial class EntityExtensionDto
    {
        [JsonConstructor]
        public EntityExtensionDto(System.Collections.Generic.IDictionary<string, object> @configuration, System.Collections.Generic.IDictionary<string, ExtensionPropertyDto> @properties)
        {
            this.Properties = @properties;
            this.Configuration = @configuration;
        }
        public System.Collections.Generic.IDictionary<string, ExtensionPropertyDto> Properties { get; }
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; }
    }

    public partial class ModuleExtensionDto
    {
        [JsonConstructor]
        public ModuleExtensionDto(System.Collections.Generic.IDictionary<string, object> @configuration, System.Collections.Generic.IDictionary<string, EntityExtensionDto> @entities)
        {
            this.Entities = @entities;
            this.Configuration = @configuration;
        }
        public System.Collections.Generic.IDictionary<string, EntityExtensionDto> Entities { get; }
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; }
    }

    public partial class ExtensionEnumFieldDto
    {
        [JsonConstructor]
        public ExtensionEnumFieldDto(string @name, object @value)
        {
            this.Name = @name;
            this.Value = @value;
        }
        public string Name { get; }
        public object Value { get; }
    }

    public partial class ExtensionEnumDto
    {
        [JsonConstructor]
        public ExtensionEnumDto(System.Collections.Generic.List<ExtensionEnumFieldDto> @fields, string @localizationResource)
        {
            this.Fields = @fields;
            this.LocalizationResource = @localizationResource;
        }
        public System.Collections.Generic.List<ExtensionEnumFieldDto> Fields { get; }
        public string LocalizationResource { get; }
    }

    public partial class ObjectExtensionsDto
    {
        [JsonConstructor]
        public ObjectExtensionsDto(System.Collections.Generic.IDictionary<string, ExtensionEnumDto> @enums, System.Collections.Generic.IDictionary<string, ModuleExtensionDto> @modules)
        {
            this.Modules = @modules;
            this.Enums = @enums;
        }
        public System.Collections.Generic.IDictionary<string, ModuleExtensionDto> Modules { get; }
        public System.Collections.Generic.IDictionary<string, ExtensionEnumDto> Enums { get; }
    }

    public partial class ApplicationConfigurationDto
    {
        [JsonConstructor]
        public ApplicationConfigurationDto(ApplicationAuthConfigurationDto @auth, ClockDto @clock, CurrentTenantDto @currentTenant, CurrentUserDto @currentUser, ApplicationFeatureConfigurationDto @features, ApplicationLocalizationConfigurationDto @localization, MultiTenancyInfoDto @multiTenancy, ObjectExtensionsDto @objectExtensions, ApplicationSettingConfigurationDto @setting, TimingDto @timing)
        {
            this.Localization = @localization;
            this.Auth = @auth;
            this.Setting = @setting;
            this.CurrentUser = @currentUser;
            this.Features = @features;
            this.MultiTenancy = @multiTenancy;
            this.CurrentTenant = @currentTenant;
            this.Timing = @timing;
            this.Clock = @clock;
            this.ObjectExtensions = @objectExtensions;
        }
        public ApplicationLocalizationConfigurationDto Localization { get; }
        public ApplicationAuthConfigurationDto Auth { get; }
        public ApplicationSettingConfigurationDto Setting { get; }
        public CurrentUserDto CurrentUser { get; }
        public ApplicationFeatureConfigurationDto Features { get; }
        public MultiTenancyInfoDto MultiTenancy { get; }
        public CurrentTenantDto CurrentTenant { get; }
        public TimingDto Timing { get; }
        public ClockDto Clock { get; }
        public ObjectExtensionsDto ObjectExtensions { get; }
    }

    public partial class RemoteServiceValidationErrorInfo
    {
        [JsonConstructor]
        public RemoteServiceValidationErrorInfo(System.Collections.Generic.List<string> @members, string @message)
        {
            this.Message = @message;
            this.Members = @members;
        }
        public string Message { get; }
        public System.Collections.Generic.List<string> Members { get; }
    }

    public partial class RemoteServiceErrorInfo
    {
        [JsonConstructor]
        public RemoteServiceErrorInfo(string @code, System.Collections.Generic.IDictionary<string, object> @data, string @details, string @message, System.Collections.Generic.List<RemoteServiceValidationErrorInfo> @validationErrors)
        {
            this.Code = @code;
            this.Message = @message;
            this.Details = @details;
            this.Data = @data;
            this.ValidationErrors = @validationErrors;
        }
        public string Code { get; }
        public string Message { get; }
        public string Details { get; }
        public System.Collections.Generic.IDictionary<string, object> Data { get; }
        public System.Collections.Generic.List<RemoteServiceValidationErrorInfo> ValidationErrors { get; }
    }

    public partial class RemoteServiceErrorResponse
    {
        [JsonConstructor]
        public RemoteServiceErrorResponse(RemoteServiceErrorInfo @error)
        {
            this.Error = @error;
        }
        public RemoteServiceErrorInfo Error { get; }
    }

    public partial class FindTenantResultDto
    {
        [JsonConstructor]
        public FindTenantResultDto(string @name, bool @success, System.Guid? @tenantId)
        {
            this.Success = @success;
            this.TenantId = @tenantId;
            this.Name = @name;
        }
        public bool Success { get; }
        public System.Guid? TenantId { get; }
        public string Name { get; }
    }

    public partial class RegisterDto
    {
        [JsonConstructor]
        public RegisterDto(string @appName, string @emailAddress, string @password, string @userName)
        {
            this.UserName = @userName;
            this.EmailAddress = @emailAddress;
            this.Password = @password;
            this.AppName = @appName;
        }
        public string UserName { get; }
        public string EmailAddress { get; }
        public string Password { get; }
        public string AppName { get; }
    }

    public partial class IdentityUserDto
    {
        [JsonConstructor]
        public IdentityUserDto(string @concurrencyStamp, System.DateTimeOffset @creationTime, System.Guid? @creatorId, System.Guid? @deleterId, System.DateTimeOffset? @deletionTime, string @email, bool @emailConfirmed, System.Collections.Generic.IDictionary<string, object> @extraProperties, System.Guid @id, bool @isDeleted, System.DateTimeOffset? @lastModificationTime, System.Guid? @lastModifierId, bool @lockoutEnabled, System.DateTimeOffset? @lockoutEnd, string @name, string @phoneNumber, bool @phoneNumberConfirmed, string @surname, System.Guid? @tenantId, string @userName)
        {
            this.ExtraProperties = @extraProperties;
            this.Id = @id;
            this.CreationTime = @creationTime;
            this.CreatorId = @creatorId;
            this.LastModificationTime = @lastModificationTime;
            this.LastModifierId = @lastModifierId;
            this.IsDeleted = @isDeleted;
            this.DeleterId = @deleterId;
            this.DeletionTime = @deletionTime;
            this.TenantId = @tenantId;
            this.UserName = @userName;
            this.Name = @name;
            this.Surname = @surname;
            this.Email = @email;
            this.EmailConfirmed = @emailConfirmed;
            this.PhoneNumber = @phoneNumber;
            this.PhoneNumberConfirmed = @phoneNumberConfirmed;
            this.LockoutEnabled = @lockoutEnabled;
            this.LockoutEnd = @lockoutEnd;
            this.ConcurrencyStamp = @concurrencyStamp;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public System.Guid Id { get; }
        public System.DateTimeOffset CreationTime { get; }
        public System.Guid? CreatorId { get; }
        public System.DateTimeOffset? LastModificationTime { get; }
        public System.Guid? LastModifierId { get; }
        public bool IsDeleted { get; }
        public System.Guid? DeleterId { get; }
        public System.DateTimeOffset? DeletionTime { get; }
        public System.Guid? TenantId { get; }
        public string UserName { get; }
        public string Name { get; }
        public string Surname { get; }
        public string Email { get; }
        public bool EmailConfirmed { get; }
        public string PhoneNumber { get; }
        public bool PhoneNumberConfirmed { get; }
        public bool LockoutEnabled { get; }
        public System.DateTimeOffset? LockoutEnd { get; }
        public string ConcurrencyStamp { get; }
    }

    public partial class SendPasswordResetCodeDto
    {
        [JsonConstructor]
        public SendPasswordResetCodeDto(string @appName, string @email, string @returnUrl, string @returnUrlHash)
        {
            this.Email = @email;
            this.AppName = @appName;
            this.ReturnUrl = @returnUrl;
            this.ReturnUrlHash = @returnUrlHash;
        }
        public string Email { get; }
        public string AppName { get; }
        public string ReturnUrl { get; }
        public string ReturnUrlHash { get; }
    }

    public partial class ResetPasswordDto
    {
        [JsonConstructor]
        public ResetPasswordDto(string @password, string @resetToken, System.Guid @userId)
        {
            this.UserId = @userId;
            this.ResetToken = @resetToken;
            this.Password = @password;
        }
        public System.Guid UserId { get; }
        public string ResetToken { get; }
        public string Password { get; }
    }

    public partial class FeatureProviderDto
    {
        [JsonConstructor]
        public FeatureProviderDto(string @key, string @name)
        {
            this.Name = @name;
            this.Key = @key;
        }
        public string Name { get; }
        public string Key { get; }
    }

    public partial class IValueValidator
    {
        [JsonConstructor]
        public IValueValidator(string @name, System.Collections.Generic.IDictionary<string, object> @properties)
        {
            this.Name = @name;
            this.Properties = @properties;
        }
        public string Name { get; }
        public System.Collections.Generic.IDictionary<string, object> Properties { get; }
    }

    public partial class IStringValueType
    {
        [JsonConstructor]
        public IStringValueType(string @name, System.Collections.Generic.IDictionary<string, object> @properties, IValueValidator @validator)
        {
            this.Name = @name;
            this.Properties = @properties;
            this.Validator = @validator;
        }
        public string Name { get; }
        public System.Collections.Generic.IDictionary<string, object> Properties { get; }
        public IValueValidator Validator { get; }
    }

    public partial class FeatureDto
    {
        [JsonConstructor]
        public FeatureDto(int @depth, string @description, string @displayName, string @name, string @parentName, FeatureProviderDto @provider, string @value, IStringValueType @valueType)
        {
            this.Name = @name;
            this.DisplayName = @displayName;
            this.Value = @value;
            this.Provider = @provider;
            this.Description = @description;
            this.ValueType = @valueType;
            this.Depth = @depth;
            this.ParentName = @parentName;
        }
        public string Name { get; }
        public string DisplayName { get; }
        public string Value { get; }
        public FeatureProviderDto Provider { get; }
        public string Description { get; }
        public IStringValueType ValueType { get; }
        public int Depth { get; }
        public string ParentName { get; }
    }

    public partial class FeatureGroupDto
    {
        [JsonConstructor]
        public FeatureGroupDto(string @displayName, System.Collections.Generic.List<FeatureDto> @features, string @name)
        {
            this.Name = @name;
            this.DisplayName = @displayName;
            this.Features = @features;
        }
        public string Name { get; }
        public string DisplayName { get; }
        public System.Collections.Generic.List<FeatureDto> Features { get; }
    }

    public partial class GetFeatureListResultDto
    {
        [JsonConstructor]
        public GetFeatureListResultDto(System.Collections.Generic.List<FeatureGroupDto> @groups)
        {
            this.Groups = @groups;
        }
        public System.Collections.Generic.List<FeatureGroupDto> Groups { get; }
    }

    public partial class UpdateFeatureDto
    {
        [JsonConstructor]
        public UpdateFeatureDto(string @name, string @value)
        {
            this.Name = @name;
            this.Value = @value;
        }
        public string Name { get; }
        public string Value { get; }
    }

    public partial class UpdateFeaturesDto
    {
        [JsonConstructor]
        public UpdateFeaturesDto(System.Collections.Generic.List<UpdateFeatureDto> @features)
        {
            this.Features = @features;
        }
        public System.Collections.Generic.List<UpdateFeatureDto> Features { get; }
    }

    public partial class UserLoginInfo
    {
        [JsonConstructor]
        public UserLoginInfo(string @password, bool @rememberMe, string @userNameOrEmailAddress)
        {
            this.UserNameOrEmailAddress = @userNameOrEmailAddress;
            this.Password = @password;
            this.RememberMe = @rememberMe;
        }
        public string UserNameOrEmailAddress { get; }
        public string Password { get; }
        public bool RememberMe { get; }
    }

    public enum LoginResultType
    {
        _1 = 1,
        _2 = 2,
        _3 = 3,
        _4 = 4,
        _5 = 5,
    }

    public partial class AbpLoginResult
    {
        [JsonConstructor]
        public AbpLoginResult(string @description, LoginResultType @result)
        {
            this.Result = @result;
            this.Description = @description;
        }
        public LoginResultType Result { get; }
        public string Description { get; }
    }

    public partial class ProviderInfoDto
    {
        [JsonConstructor]
        public ProviderInfoDto(string @providerKey, string @providerName)
        {
            this.ProviderName = @providerName;
            this.ProviderKey = @providerKey;
        }
        public string ProviderName { get; }
        public string ProviderKey { get; }
    }

    public partial class PermissionGrantInfoDto
    {
        [JsonConstructor]
        public PermissionGrantInfoDto(System.Collections.Generic.List<string> @allowedProviders, string @displayName, System.Collections.Generic.List<ProviderInfoDto> @grantedProviders, bool @isGranted, string @name, string @parentName)
        {
            this.Name = @name;
            this.DisplayName = @displayName;
            this.ParentName = @parentName;
            this.IsGranted = @isGranted;
            this.AllowedProviders = @allowedProviders;
            this.GrantedProviders = @grantedProviders;
        }
        public string Name { get; }
        public string DisplayName { get; }
        public string ParentName { get; }
        public bool IsGranted { get; }
        public System.Collections.Generic.List<string> AllowedProviders { get; }
        public System.Collections.Generic.List<ProviderInfoDto> GrantedProviders { get; }
    }

    public partial class PermissionGroupDto
    {
        [JsonConstructor]
        public PermissionGroupDto(string @displayName, string @name, System.Collections.Generic.List<PermissionGrantInfoDto> @permissions)
        {
            this.Name = @name;
            this.DisplayName = @displayName;
            this.Permissions = @permissions;
        }
        public string Name { get; }
        public string DisplayName { get; }
        public System.Collections.Generic.List<PermissionGrantInfoDto> Permissions { get; }
    }

    public partial class GetPermissionListResultDto
    {
        [JsonConstructor]
        public GetPermissionListResultDto(string @entityDisplayName, System.Collections.Generic.List<PermissionGroupDto> @groups)
        {
            this.EntityDisplayName = @entityDisplayName;
            this.Groups = @groups;
        }
        public string EntityDisplayName { get; }
        public System.Collections.Generic.List<PermissionGroupDto> Groups { get; }
    }

    public partial class UpdatePermissionDto
    {
        [JsonConstructor]
        public UpdatePermissionDto(bool @isGranted, string @name)
        {
            this.Name = @name;
            this.IsGranted = @isGranted;
        }
        public string Name { get; }
        public bool IsGranted { get; }
    }

    public partial class UpdatePermissionsDto
    {
        [JsonConstructor]
        public UpdatePermissionsDto(System.Collections.Generic.List<UpdatePermissionDto> @permissions)
        {
            this.Permissions = @permissions;
        }
        public System.Collections.Generic.List<UpdatePermissionDto> Permissions { get; }
    }

    public partial class ProfileDto
    {
        [JsonConstructor]
        public ProfileDto(string @email, System.Collections.Generic.IDictionary<string, object> @extraProperties, bool @hasPassword, bool @isExternal, string @name, string @phoneNumber, string @surname, string @userName)
        {
            this.ExtraProperties = @extraProperties;
            this.UserName = @userName;
            this.Email = @email;
            this.Name = @name;
            this.Surname = @surname;
            this.PhoneNumber = @phoneNumber;
            this.IsExternal = @isExternal;
            this.HasPassword = @hasPassword;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string UserName { get; }
        public string Email { get; }
        public string Name { get; }
        public string Surname { get; }
        public string PhoneNumber { get; }
        public bool IsExternal { get; }
        public bool HasPassword { get; }
    }

    public partial class UpdateProfileDto
    {
        [JsonConstructor]
        public UpdateProfileDto(string @email, System.Collections.Generic.IDictionary<string, object> @extraProperties, string @name, string @phoneNumber, string @surname, string @userName)
        {
            this.ExtraProperties = @extraProperties;
            this.UserName = @userName;
            this.Email = @email;
            this.Name = @name;
            this.Surname = @surname;
            this.PhoneNumber = @phoneNumber;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string UserName { get; }
        public string Email { get; }
        public string Name { get; }
        public string Surname { get; }
        public string PhoneNumber { get; }
    }

    public partial class ChangePasswordInput
    {
        [JsonConstructor]
        public ChangePasswordInput(string @currentPassword, string @newPassword)
        {
            this.CurrentPassword = @currentPassword;
            this.NewPassword = @newPassword;
        }
        public string CurrentPassword { get; }
        public string NewPassword { get; }
    }

    public partial class IdentityRoleDto
    {
        [JsonConstructor]
        public IdentityRoleDto(string @concurrencyStamp, System.Collections.Generic.IDictionary<string, object> @extraProperties, System.Guid @id, bool @isDefault, bool @isPublic, bool @isStatic, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Id = @id;
            this.Name = @name;
            this.IsDefault = @isDefault;
            this.IsStatic = @isStatic;
            this.IsPublic = @isPublic;
            this.ConcurrencyStamp = @concurrencyStamp;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public System.Guid Id { get; }
        public string Name { get; }
        public bool IsDefault { get; }
        public bool IsStatic { get; }
        public bool IsPublic { get; }
        public string ConcurrencyStamp { get; }
    }

    public partial class IdentityRoleDtoListResultDto
    {
        [JsonConstructor]
        public IdentityRoleDtoListResultDto(System.Collections.Generic.List<IdentityRoleDto> @items)
        {
            this.Items = @items;
        }
        public System.Collections.Generic.List<IdentityRoleDto> Items { get; }
    }

    public partial class IdentityRoleDtoPagedResultDto
    {
        [JsonConstructor]
        public IdentityRoleDtoPagedResultDto(System.Collections.Generic.List<IdentityRoleDto> @items, long @totalCount)
        {
            this.Items = @items;
            this.TotalCount = @totalCount;
        }
        public System.Collections.Generic.List<IdentityRoleDto> Items { get; }
        public long TotalCount { get; }
    }

    public partial class IdentityRoleCreateDto
    {
        [JsonConstructor]
        public IdentityRoleCreateDto(System.Collections.Generic.IDictionary<string, object> @extraProperties, bool @isDefault, bool @isPublic, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Name = @name;
            this.IsDefault = @isDefault;
            this.IsPublic = @isPublic;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string Name { get; }
        public bool IsDefault { get; }
        public bool IsPublic { get; }
    }

    public partial class IdentityRoleUpdateDto
    {
        [JsonConstructor]
        public IdentityRoleUpdateDto(string @concurrencyStamp, System.Collections.Generic.IDictionary<string, object> @extraProperties, bool @isDefault, bool @isPublic, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Name = @name;
            this.IsDefault = @isDefault;
            this.IsPublic = @isPublic;
            this.ConcurrencyStamp = @concurrencyStamp;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string Name { get; }
        public bool IsDefault { get; }
        public bool IsPublic { get; }
        public string ConcurrencyStamp { get; }
    }

    public partial class TenantDto
    {
        [JsonConstructor]
        public TenantDto(System.Collections.Generic.IDictionary<string, object> @extraProperties, System.Guid @id, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Id = @id;
            this.Name = @name;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public System.Guid Id { get; }
        public string Name { get; }
    }

    public partial class TenantUpdateDto
    {
        [JsonConstructor]
        public TenantUpdateDto(System.Collections.Generic.IDictionary<string, object> @extraProperties, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Name = @name;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string Name { get; }
    }

    public partial class TenantDtoPagedResultDto
    {
        [JsonConstructor]
        public TenantDtoPagedResultDto(System.Collections.Generic.List<TenantDto> @items, long @totalCount)
        {
            this.Items = @items;
            this.TotalCount = @totalCount;
        }
        public System.Collections.Generic.List<TenantDto> Items { get; }
        public long TotalCount { get; }
    }

    public partial class TenantCreateDto
    {
        [JsonConstructor]
        public TenantCreateDto(string @adminEmailAddress, string @adminPassword, System.Collections.Generic.IDictionary<string, object> @extraProperties, string @name)
        {
            this.ExtraProperties = @extraProperties;
            this.Name = @name;
            this.AdminEmailAddress = @adminEmailAddress;
            this.AdminPassword = @adminPassword;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string Name { get; }
        public string AdminEmailAddress { get; }
        public string AdminPassword { get; }
    }

    public partial class IdentityUserUpdateDto
    {
        [JsonConstructor]
        public IdentityUserUpdateDto(string @concurrencyStamp, string @email, System.Collections.Generic.IDictionary<string, object> @extraProperties, bool @lockoutEnabled, string @name, string @password, string @phoneNumber, System.Collections.Generic.List<string> @roleNames, string @surname, string @userName)
        {
            this.ExtraProperties = @extraProperties;
            this.UserName = @userName;
            this.Name = @name;
            this.Surname = @surname;
            this.Email = @email;
            this.PhoneNumber = @phoneNumber;
            this.LockoutEnabled = @lockoutEnabled;
            this.RoleNames = @roleNames;
            this.Password = @password;
            this.ConcurrencyStamp = @concurrencyStamp;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string UserName { get; }
        public string Name { get; }
        public string Surname { get; }
        public string Email { get; }
        public string PhoneNumber { get; }
        public bool LockoutEnabled { get; }
        public System.Collections.Generic.List<string> RoleNames { get; }
        public string Password { get; }
        public string ConcurrencyStamp { get; }
    }

    public partial class IdentityUserDtoPagedResultDto
    {
        [JsonConstructor]
        public IdentityUserDtoPagedResultDto(System.Collections.Generic.List<IdentityUserDto> @items, long @totalCount)
        {
            this.Items = @items;
            this.TotalCount = @totalCount;
        }
        public System.Collections.Generic.List<IdentityUserDto> Items { get; }
        public long TotalCount { get; }
    }

    public partial class IdentityUserCreateDto
    {
        [JsonConstructor]
        public IdentityUserCreateDto(string @email, System.Collections.Generic.IDictionary<string, object> @extraProperties, bool @lockoutEnabled, string @name, string @password, string @phoneNumber, System.Collections.Generic.List<string> @roleNames, string @surname, string @userName)
        {
            this.ExtraProperties = @extraProperties;
            this.UserName = @userName;
            this.Name = @name;
            this.Surname = @surname;
            this.Email = @email;
            this.PhoneNumber = @phoneNumber;
            this.LockoutEnabled = @lockoutEnabled;
            this.RoleNames = @roleNames;
            this.Password = @password;
        }
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties { get; }
        public string UserName { get; }
        public string Name { get; }
        public string Surname { get; }
        public string Email { get; }
        public string PhoneNumber { get; }
        public bool LockoutEnabled { get; }
        public System.Collections.Generic.List<string> RoleNames { get; }
        public string Password { get; }
    }

    public partial class IdentityUserUpdateRolesDto
    {
        [JsonConstructor]
        public IdentityUserUpdateRolesDto(System.Collections.Generic.List<string> @roleNames)
        {
            this.RoleNames = @roleNames;
        }
        public System.Collections.Generic.List<string> RoleNames { get; }
    }

    public partial class UserData
    {
        [JsonConstructor]
        public UserData(string @email, bool @emailConfirmed, System.Guid @id, string @name, string @phoneNumber, bool @phoneNumberConfirmed, string @surname, System.Guid? @tenantId, string @userName)
        {
            this.Id = @id;
            this.TenantId = @tenantId;
            this.UserName = @userName;
            this.Name = @name;
            this.Surname = @surname;
            this.Email = @email;
            this.EmailConfirmed = @emailConfirmed;
            this.PhoneNumber = @phoneNumber;
            this.PhoneNumberConfirmed = @phoneNumberConfirmed;
        }
        public System.Guid Id { get; }
        public System.Guid? TenantId { get; }
        public string UserName { get; }
        public string Name { get; }
        public string Surname { get; }
        public string Email { get; }
        public bool EmailConfirmed { get; }
        public string PhoneNumber { get; }
        public bool PhoneNumberConfirmed { get; }
    }

    public partial class UserDataListResultDto
    {
        [JsonConstructor]
        public UserDataListResultDto(System.Collections.Generic.List<UserData> @items)
        {
            this.Items = @items;
        }
        public System.Collections.Generic.List<UserData> Items { get; }
    }
}
#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108